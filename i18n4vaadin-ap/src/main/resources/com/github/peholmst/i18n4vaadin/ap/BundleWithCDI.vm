package ${packageName};

import com.github.peholmst.i18n4vaadin.I18N;
import com.github.peholmst.i18n4vaadin.LocaleChangedEvent;
import java.text.MessageFormat;
import java.util.Locale;
import java.util.ResourceBundle;
import javax.annotation.Generated;
import javax.enterprise.context.SessionScoped;
import javax.enterprise.event.Observes;
import javax.enterprise.event.Reception;
import javax.inject.Inject;

/**
 * Please note that this class is not thread safe! Invocations from multiple
 * threads must be synchronized!
 */
@Generated(value = "${generator}", date = "${generationDate}")
@SessionScoped
public class Bundle implements com.github.peholmst.i18n4vaadin.Bundle {

    private transient ResourceBundle bundle;

    @Inject
    @SessionScoped
    private I18N i18n;

    private Locale getLocale() {
        return i18n.getLocale();
    }

    protected void localeChanged(@Observes(notifyObserver = Reception.IF_EXISTS) LocaleChangedEvent event) {
        bundle = null;
    }

    private ResourceBundle getBundle() {
        if (bundle == null) {
            bundle = ResourceBundle.getBundle("${packageName}.messages", getLocale());
        }
        return bundle;
    }

#foreach ($property in $properties)

    public String $property.replace('.','_')(Object... args) {
        return getMessage("$property", args);
    }

    public static final String $property.replace('.','_').toUpperCase() = "$property";

#end

    @Override
    public String getMessage(String key, Object... args) {
        final MessageFormat mf = new MessageFormat(getBundle().getString(key), getLocale());
        return mf.format(args, new StringBuffer(), null).toString();
    }

    @Override
    public boolean containsKey(String key) {
        return getBundle().containsKey(key);
    }
}
